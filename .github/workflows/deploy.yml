name: Build and Deploy Frontend to Azure Container App

on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

env:
  REGISTRY_NAME: invoicesregistry # Using your existing registry
  IMAGE_NAME: invoices-frontend
  RESOURCE_GROUP: invoices-store-00001 # Using your existing resource group
  CONTAINER_APP_NAME: invoices-frontend
  LOCATION: southindia
  BACKEND_URL: https://invoices-store.yellowsky-00a47c99.southindia.azurecontainerapps.io/api/v1

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests (if you have any)
        run: npm run test --if-present

      - name: Build Next.js app
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ env.BACKEND_URL }}

      - name: Log in to Azure Container Registry
        run: echo "${{ secrets.AZURE_REGISTRY_PASSWORD }}" | docker login ${{ env.REGISTRY_NAME }}.azurecr.io -u ${{ secrets.AZURE_REGISTRY_USERNAME }} --password-stdin

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image to ACR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          build-args: |
            NEXT_PUBLIC_API_URL=${{ env.BACKEND_URL }}
          tags: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Check if Container App exists
        id: check-app
        run: |
          if az containerapp show --name $CONTAINER_APP_NAME --resource-group $RESOURCE_GROUP > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Container App Environment (if needed)
        if: steps.check-app.outputs.exists == 'false'
        run: |
          # Check if environment exists, create if not
          if ! az containerapp env show --name invoices-environment --resource-group $RESOURCE_GROUP > /dev/null 2>&1; then
            az containerapp env create \
              --name invoices-environment \
              --resource-group $RESOURCE_GROUP \
              --location $LOCATION
          fi

      - name: Create Container App (if it doesn't exist)
        if: steps.check-app.outputs.exists == 'false'
        run: |
          az containerapp create \
            --name $CONTAINER_APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --environment invoices-environment \
            --image $REGISTRY_NAME.azurecr.io/$IMAGE_NAME:latest \
            --target-port 3000 \
            --ingress external \
            --registry-server $REGISTRY_NAME.azurecr.io \
            --registry-username ${{ secrets.AZURE_REGISTRY_USERNAME }} \
            --registry-password ${{ secrets.AZURE_REGISTRY_PASSWORD }} \
            --env-vars NEXT_PUBLIC_API_URL=${{ env.BACKEND_URL }}

      - name: Update Container App (if it exists)
        if: steps.check-app.outputs.exists == 'true'
        run: |
          az containerapp update \
            --name $CONTAINER_APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --image $REGISTRY_NAME.azurecr.io/$IMAGE_NAME:latest \
            --set-env-vars NEXT_PUBLIC_API_URL=${{ env.BACKEND_URL }}